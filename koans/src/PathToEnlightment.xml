<?xml version="1.0" encoding="ISO-8859-1"?>
<packages>
	<package pkg="beginner" name="Novice">
		<suite class="AboutKoans">
			<koan name="findAboutKoansFile"
				lesson="You need to open the file ${file_path}${file_name}.java. There should be a method starting with @Koan called ${method_name}, look within it for your first lesson. Once conquered, run again for your next lesson."
				displayIncompleteKoanException="false" />
			<koan name="definitionOfKoanCompletion"
				lesson="A koan is considered complete when it no longer throws an exception. Often there is more than one way to solve a koan, but only one correct way. This is often hinted at within the koan itself, or the comments appearing here."
				displayIncompleteKoanException="false" />
		</suite>
		<suite class="AboutAssertions">
			<koan name="assertBooleanTrue"
				lesson="The __ are an attempt to communicate the need to fill in an answer. Judging by context, what should __ be replaced with?" />
			<koan name="assertBooleanFalse"
				lesson="Like the prior koan. Ponder if you will, the power of simple assertions when verifying an object's behavior." />
			<!-- TODO introduce instantiation, constructors -->
			<koan name="assertNullObject"
				lesson="A keyword in java to represent an unitialized reference is 'null'. There are times when something should be null, and this assertion can prove that." />
			<koan name="assertNotNullObject"
				lesson="Sometimes you merely wish to assert an object is not null. This assertion should be used sparingly, often a more specific assertion is appropriate." />
			<!-- TODO explain arguments (mention they've been used in prior koans, 
				or maybe wedge that lesson earlier?) -->
			<koan name="assertEqualsWithDescriptiveMessage"
				lesson="Like the prior assertions, only this one invokes equals method on the 2nd to last argument, in this case, 1. This will blow up if the last two arguments are not .equal(...)" />
			<!-- TODO finish explaining -->
			<koan name="assertSameInstance"
				lesson="An object may equal another object, but it will never be the same as another object. Two references to the same object is not the same as two references to two equal objects." />
			<koan name="assertNotSameInstance"
				lesson="Notice the same instance has been reassigned. Both same and sameReference refer to the same Integer instance. If sameReference were a new Object() of any type [hint!] this would pass." />
			<!-- TODO assertThatUsingMatcher" -->
		</suite>
		<!-- TODO: AboutDataTypes... -->
		<suite class="AboutObjects">
			<koan name="objectEqualsNull"
				lesson="An Object instance should NEVER equal null keyword. This applies to all subclasses (everything exception primitives subclass Object)." />
			<koan name="objectEqualsSelf"
				lesson="An Object instance should equal itself. This too applies to all subclasses of Object." />
			<koan name="objectIdentityEqualityIsTrueWhenReferringToSameObject"
				lesson="An object should equal itself, even if referenced from another variable name." />
			<koan name="subclassesEqualsMethodIsLooserThanDoubleEquals"
				lesson="Integer, and many other classes implement equals logically, in other words, they compare properties of each other and not just identity." />
			<koan name="doubleEqualsOperatorEvalutesToTrueOnlyWithSameInstance"
				lesson="Double equals operator (==) does not invoke equal, it will evaluate to true if both references refer to the same object or primitive." />
			<koan name="doubleEqualsOperatorEvalutesToFalseWithDifferentInstances"
				lesson="The inverse of the prior koan, though two objects may be logically equal, they are not referencing the same object." />
			<koan name="objectToString"
				lesson="How to identify an object at in string form. Should be overridden in any objects with internal state. Default to string is classname of the instance followed by its hashCode in base 16 (hexadecimal)." />
			<koan name="toStringConcatenates"
				lesson="Java 's string concatenation syntax utilizes addition operator to splice a string with virtually anything." />
			<koan name="toStringIsTestedForNullWhenInvokedImplicitly"
				lesson="String concatenation implicitly invokes toString on Objects, unless they are null. Notice no NullPointerException is thrown." />
		</suite>
		<suite class="AboutLoops">
			<koan name="basicForLoop" />
			<koan name="basicForLoopWithTwoVariables" />
			<koan name="extendedForLoop" />
			<koan name="whileLoop" />
			<koan name="doLoop" />
			<koan name="extendedForLoopBreak" />
			<koan name="extendedForLoopContinue" />
			<koan name="forLoopContinueLabel" />
			<koan name="forLoopBreakLabel" />
		</suite>
		<suite class="AboutCasting">
			<koan name="longPlusInt" />
			<koan name="forceIntTypecast" />
			<koan name="implicitTypecast" />
			<koan name="downCastWithInerhitance" />
			<koan name="downCastAndPolymophism" />
			<koan name="upCastWithInheritance" />
			<koan name="upCastAndPolymophism" />
			<koan name="complicatedCast" />
			<koan name="complicatedCastWithInterface" />
		</suite>
		<suite class="AboutConditionals">
			<koan name="basicIfWithoutCurly" />
			<koan name="basicIfElseWithoutCurly" />
			<koan name="basicIfElseIfElseWithoutCurly" />
			<koan name="nestedIfsWithoutCurlysAreReallyMisleading" />
			<koan name="ifAsIntended" />
			<koan name="basicSwitchStatement" />
			<koan name="switchStatementFallThrough" />
			<koan name="switchStatementCrazyFallThrough" />
			<koan name="switchStatementConstants" />
			<koan name="switchStatementSwitchValues" />
		</suite>
		<suite class="AboutInheritance">
			<koan name="differenceBetweenOverloadingAndOverriding" />
			<koan name="overridenMethodsMayReturnSubtype"
				lesson="An overridden method may return a subtype of the return type for the method being overridden. Look at the javadoc for java.util.Collection or java.util.List - it will reveal how to eliminate this type cast." />
		</suite>
		<suite class="AboutConstructors">
			<koan name="simpleConstructorOrder" />
			<koan name="complexConstructorOrder" />
		</suite>
		<suite class="AboutEnums">
			<koan name="basicEnums" />
			<koan name="basicEnumsAccess" />
			<koan name="enumsWithAttributes" />
			<koan name="enumsWithMethods" />
		</suite>
		<suite class="AboutMethodPreference">
			<koan name="methodPreferenceInt" />
			<koan name="methodPreferenceInteger" />
			<koan name="methodPreferenceLong" />
			<koan name="methodPreferenceBoxedLong" />
			<koan name="methodPreferenceDouble" />
			<koan name="methodPreferenceMore" />
		</suite>
		<suite class="AboutOperators">
			<koan name="plusPlusVariablePlusPlus" />
			<koan name="shortCircuit" />
			<koan name="fullAnd" />
			<koan name="shortCircuitAnd" />
			<koan name="aboutXOR" />
			<koan name="dontMistakeEqualsForEqualsEquals" />
			<koan name="aboutBitShiftingRightShift" />
			<koan name="aboutBitShiftingLeftShift" />
			<koan name="aboutBitShiftingRightUnsigned" />
		</suite>
		<suite class="AboutArrays">
			<koan name="arraysDoNotConsiderElementsWhenEvaluatingEquality"
				lesson="Arrays utilize reference equality, they do not consider elements when determining equality." />
			<koan name="cloneEqualityIs_NotRespected"
				lesson="The general contract of clone is that: Object a == new Object(); a != a.clone(); a.equals(a.clone()). Array instances DO NOT honor this contract, despite implementing Cloneable." />
			<koan name="anArraysHashCodeMethodDoesNotConsiderElements"
				lesson="Likewise with hashcode, an array instance's hashCode is that of the array, it does not incorporate elements." />
			<koan
				name="arraysHelperClassEqualsMethodConsidersElementsWhenDeterminingEquality"
				lesson="The Arrays.equals(...) method DOES evaluate elements when determining equality. This is called 'Logical Equality'." />
			<koan
				name="arraysHelperClassHashCodeMethodConsidersElementsWhenDeterminingHashCode"
				lesson="Likewise with hashCode, the Arrays.hashCode(...) method DOES consider elements when determining hashCode." />
			<koan name="arraysAreMutable"
				lesson="Arrays are always mutable, even when declared final. The final declaration prevents reassignment, but does nothing for elements." />
			<koan name="arraysAreIndexedAtZero"
				lesson="Arrays contain elements which are indexed by a number starting with zero." />
			<koan name="arrayIndexOutOfBounds"
				lesson="Array instances blow up when referencing an index that doesn't exist." />
			<koan name="arrayLengthCanBeChecked"
				lesson="It is often necessary to check the length of an array to ensure an index is valid. This is easy with the array's length property." />
		</suite>
		<suite class="AboutPrimitives">
			<koan name="byteSize" />
			<koan name="shortSize" />
			<koan name="integerSize" />
			<koan name="longSize" />
			<koan name="charSizeAndValue" />
			<koan name="floatSize" />
			<koan name="doubleSize" />
		</suite>
	</package>
	<package pkg="intermediate" name="Intermediate">
		<suite class="AboutAutoboxing">
			<koan name="addPrimativesToCollection"
				lesson="Before Java 5, we had to convert primatives to add to collections" />
			<koan name="addPrimativesToCollectionWithAutoBoxing" lesson="With AutoBoxing, we can _cheat_" />
			<koan name="migrateYourExistingCodeToAutoBoxingWithoutFear"
				lesson="With AutoBoxing, we can intermix as well" />
			<koan name="allPrimativesCanBeAutoboxed" lesson="All primatives can be autoboxed" />
		</suite>
		<suite class="AboutFileIO">
			<koan name="fileObjectDoesntCreateFile" />
			<koan name="fileCreationAndDeletion" />
			<koan name="basicFileWritingAndReading" />
			<koan name="betterFileWritingAndReading" />
			<koan name="directChainingForReadingAndWriting" />
		</suite>
		<suite class="AboutInnerClasses">
			<koan name="creatingInnerClassInstance" />
			<koan name="creatingInnerClassInstanceWithOtherSyntax" />
			<koan name="accessingOuterClassMembers" />
			<koan name="innerClassesInMethods" />
			<koan name="innerClassesInMethodsThatEscape" />
			<koan name="creatingAnonymousInnerClasses" />
			<koan name="creatingAnonymousInnerClassesToImplementInterface" />
			<koan name="innerClassAndInheritance" />
			<koan name="innerClassAndInheritanceOther" />
			<koan name="staticInnerClass" />
			<koan name="staticInnerClassFullyQualified" />
		</suite>
		<suite class="AboutSerialization">
			<koan name="simpleSerialization" />
			<koan name="customObjectSerialization" />
			<koan name="customObjectSerializationWithTransientFields" />
			<koan name="customSerializationWithUnserializableFields" />
			<koan name="serializeWithInteritance" />
			<koan name="serializeWithInheritanceWhenParentNotserializable" />
		</suite>
	</package>
	<package pkg="advanced" name="Advanced">
		<suite class="AboutMocks">
			<koan name="simpleAnonymousMock"
				lesson="How can this pass without touching the ClassUnderTest?" />
		</suite>
	</package>
</packages>
